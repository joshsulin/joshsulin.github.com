---
layout: post
title:  "第二课: 理解Rust的所有权"
date:   2021-07-31 20:19:20 +0800
categories: Rust
tags: ['Rust']
---

大家好, 欢迎大家来参加这次公开课, 今天跟大家一起探讨Rust的所有权机制, 所有权让Rust实现了既要保障内存安全又要无GC, 运行时高性能的目标, 所有权是Rust最大的卖点之一, 也是Rust连续六年成为最受欢迎的语言的原因.

你是否想学习Rust并且总是听到有关所有权(Ownership)和借用(Borrowing)的概念，但是你不能完全理解它到底是什么。所有权十分重要，理解这个概念对于初学Rust来讲是有很大好处的，并且这也能让你在实现程序的过程中避免很多编译错误.

今天给大家带来的主题是: 理解Rust的所有权, 我们将会更仔细地来看一看Rust是如何管理内存并且所有权为何极大地影响了我们在Rust中写代码的方式以及它是如何保证内存安全的.

PPT

首先我来简单的介绍一下自己.

我叫苏林, 是一名从事于互联网研发的程序员, 也是一名技术爱好者, 在互联网行业沉浮十余年, 先后效力于电商、SaaS领域, 对底层系统级开发比较感兴趣, 也才促使我学习和探索Rust语言. 

PPT

我今天想给大家分享的内容一共包含四部分：

第一: 什么是内存安全?(What is Memory Safety anyway?)
	在讨论是什么让Rust作为一门编程语言能够脱颖而出时，我们最好能够先来理解内存安全意味着什么？

第二: 堆和栈(Stack and Heap)
	如果连这两种数据结构都不太熟悉, 去扯所有权, 我个人觉得简直就是在在扯淡.

第三: 理解所有权(Understanding Ownership)
	所有权是Rust最大的卖点之一, 也是Rust连续六年成为最受欢迎的语言的原因.

第四: 移动和借用(Moves and Borrowing)
	Rust是怎么保证只有一个变量拥有它的值, 会进行更深入的讨论.

第五: 讨论Rustlings上move_semantics的5道题
	通过这5道题加深对Rust所有权机制的理解.
